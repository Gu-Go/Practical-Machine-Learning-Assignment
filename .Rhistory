rm(list=ls())    # free up memory for the download of the data sets
setwd("C:/Users/selin2/Documents/Data Science/Machine Learning/PMLAssignment")
library(caret)
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(UrlTrain))
dim(training)
training <- na.omit(training)
dim(training)
testing  <- read.csv(url(UrlTest))
dim(testing)
head(testing)
testing <- na.omit(testing)
dim(testing)
Urla <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
Urlb <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(Urla), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(Urlb), na.strings=c("NA","#DIV/0!",""))
dim(training)
head(testing)
dim(training)
head(training$classe)
table(training$classe)
training[colSums(!is.na(training))>0]
dim(training)
summary(training)
NA_Count = sapply(1:dim(training)[2],function(x)sum(is.na(training[,x])))
NA_list = which(NA_Count>0)
colnames(training[,c(1:7)])
dim(training)[2]
training[2]
summary(training)
NA_list
training = training[,-NA_list]
training = training[,-c(1:7)]
dim(training)
dim(NA_list)
count(NA_list)
table(training@classe)
table(training$classe)
dim(table)
dim(training)
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
# apply our definition of remove columns that most doesn't have data, before its apply to the model.
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
dim(training)
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(UrlTrain))
trainingO <- training
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
# apply our definition of remove columns that most doesn't have data, before its apply to the model.
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
dim(training)
training <- trainingO
training[, colSums(is.na(training)) == 0]
dim(training)
training[,apply(training,2,function(x)!any(is.na(x)))]
dim(training)
training[,!apply(is.na(training),2,any)]
dim(training)
subset(training, select=colMeans(is.na(tm1)) == 0)
subset(training, select=colMeans(is.na(training)) == 0)
dim(training)
training[,!apply(is.na(training),2,any)]
dim(training)
head(training)
trainN <- training[, -which(apply(training,2,function(x)all(is.na(x))))]
dim(trainN)
head(trainN)
dim(training)
trainN <- training[,!apply(is.na(training),2,any)]
dim(trainN)
trainN <- subset(training, select=colMeans(is.na(training)) == 0)
dim(trainN)
training <- trainingO
trainN <- subset(training, select=colMeans(is.na(training)) == 0)
dim(trainN)
head(trainN)
trainN1 <- training[,!sapply(training,function(x) any(is.na(x))]
trainN1 <- training[,!sapply(training,function(x) any(is.na(x)))]
dim(trainN1)
trainN2 <- trainN1[colSums(is.na(trainN2)) > 500]
trainN2 <- trainN1[colSums(is.na(trainN1)) > 500]
dim(trainN2)
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(UrlTrain))
dim(training)
trainingO <- training
trainN <- training[,!sapply(training,function(x) any(is.na(x)))]
dim(trainN)
NA_Count = sapply(1:dim(training)[2],function(x)sum(is.na(training[,x])))
NA_Count
trainN1 = !sapply(training,function(x) any(is.na(x)))]
trainN1 = !sapply(training,function(x) any(is.na(x)))
trainN1
trainN1 <-training[,colSums(is.na(training)) == 0]
dim(trainN1)
dim(NA_Count)
NA_list = which(NA_Count >0)
dim(NA_list)
count(NA_list)
NA_List
NA_list
training <- trainingO
NA_Count = sapply(1:dim(training)[2],function(x)sum(is.na(training[,x])))
NA_list = which(NA_Count>0)
NA_list
NZV <- nearZeroVar(Training)
NZV <- nearZeroVar(training)
dim(NZV)
NZV
training[6]
head(training[6])
head(trainN$new_window)
NZV
head(training[12])
head(trainN$kurtosis_roll_belt)
summary(training$kurtosis_roll_belt)
dim(training)
NA_Count = sapply(1:dim(training)[2],function(x)sum(is.na(training[,x])))
NA_list = which(NA_Count>0)
colnames(training[,c(1:7)])
training = training[,-NA_list]
dim(training)
training = training[,-c(1:7)]
dim(training)
training$classe = factor(training$classe)
dim(training)
head(training,1)
training[1]
head(training[1])
head(trainingO[1])
head(trainingO[2])
head(trainingO[3])
head(trainingO[4])
head(trainingO[5]
)
head(trainingO[6])
head(trainingO[7])
head(trainingO[8])
training <- training[,-nearZeroVar(training)]
testing <- testing[,-nearZeroVar(testing)]
dim(training);dim(testing)
head(training[,1:7],1)
training[1]
head(training[,1:7],1)
head(training[,1:8],1)
head(training[,0:8],1)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the LVQ model
set.seed(7)
modelLvq <- train(classe ~., data=training, method="lvq", trControl=control)
set.seed(7)
modelGbm <- train(classe ~., data=training, method="gbm", trControl=control, verbose=FALSE)
control <- trainControl(method="repeatedcv", number=3, allowParallel = TRUE)
# train the LVQ model
set.seed(7)TRUE
control <- trainControl(method="repeatedcv", number=3, allowParallel = TRUE)
# train the LVQ model
set.seed(7)
modelLvq <- train(classe ~., data=training, method="lvq", trControl=control)
modrf = train(classe~., data=training, method="rf",trControl=control)
